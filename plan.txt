Plan de la thèse
Titre provisoire proposé : "Contribution à la Vérification de Programmes C par Combinaison Tests et Preuves"


Distribuer l'état de l'art sur les parties, mais pas les expérimentations, car
on veut mettre en évidence les protocoles d'expérimentation. 




Introduction



Partie 1: Contexte et objectifs

   Ch 1: Vérification et validation de programmes

     - statique

     - dynamique

   Ch 2: état de l'art (non, distribué sur les parties, 15 pages à ce jour)

     - langages de spécification (intro)

     - frama-c (intro)

   Ch 3: motivations et contributions
Liste des contributions :
	- extension d'une méthode de génération de tests structurels de programmes C à
	  des programmes C annotés par le sous-ensemble du langage ACSL appelé E-ACSL
	- développement d'une méthode de combinaison Test et Preuve
	- proposition de scénarios types d'utilisation de cette méthode
	- implémentation de la combinaison Test et preuve dans STADY
	- expérimentations évaluant l'impact de la méthode
	- stage E-ACSL



Partie 2: Combinaisons statique-dynamique

   Ch 4: Existant en preuve+test
  
   Problématique ciblée : Preuves, échecs de
   preuve, raisons de ces échecs état de l'art sur la preuve de programmes
         
         test concolique, couverture
         
   Ch 5: Scénarios de vérification (TAP'14+SEFM'15)
      
       - NCD

       - CWD

       - méthode globale

   Ch 6: Annotations ACSL testables et exécutables (règles de traduction)
         SCAM'14
        
   Ch 7: Preuve de correction (si possible, sinon, principes)

   Ch 8: Modèle mémoire pour la validation d'assertions à l'exécution
        (stage + RV'13)



Partie 3: Outils et expérimentations

- évaluer la capacité à trouver des erreurs dans le code par détection de contre
  exemples. On prend des codes faux engendrés par mutation, une spécification juste et on mesure pour combien de codes faux on trouve des contre-exemples.
- même chose en mutant les spécifications
- détection de sous-spécification (par mutation)

Mais comment évaluer ce qu'on annonce en conclusion ? :
- gain de temps de vérification (idée d'expérimenter en TP). 
- capacité à détecter des erreurs plus tôt dans le processus ?

   Ch 9: Greffon Statique-Dynamique (StaDy) :

       - Implémentation
       	 Rapprochement Frama-C et PathCrawler
	 Instrumentation de E-ACSL

       - Expérimentations (de validation de l'outil)

   Ch 10: Modèle mémoire E-ACSL (11 pages)

       - Implémentation

       - Expérimentations



Partie 4: Conclusion

   Bilan + perspectives
